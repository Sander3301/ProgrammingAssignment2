##The first function, `makeCacheMatrix` creates a special "matrix", which forms the basis for the inversion of this "matrix"

makeCacheMatrix <- function(x = matrix()) {
        m <- NULL
        set <- function (y) { 
                        x <<- y
                        m <<- NULL
        }
        get <- function() x
        setMatrix <- function(solve) m <<- matrix
        getMatrix <- function() m
        list (set = set, get = get, setMatrix = setMatrix, getMatrix = getMatrix)
        
}


## cacheSolve in turn calculates the inverse of the "matrix", after it has checked whether this inverse already exists. In the latter case,
## it simply returns what it has found / calculated as the inverse earlier

cacheSolve <- function(x, ...) {
        m <- x$getMatrix()
        if(!is.null(m)) {
                message("getting cached matrix")
                return(m)
        }
        data <- x$get()
        m <- solve(data, ...)
        x$setMatrix(m)
        m
}
